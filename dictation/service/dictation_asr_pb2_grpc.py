# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import dictation_asr_pb2 as dictation__asr__pb2


class SpeechStub(object):
  """Service that implements Google Cloud Speech API extended by Techmo.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Recognize = channel.unary_unary(
        '/google.cloud.speech.v1.Speech/Recognize',
        request_serializer=dictation__asr__pb2.RecognizeRequest.SerializeToString,
        response_deserializer=dictation__asr__pb2.RecognizeResponse.FromString,
        )
    self.StreamingRecognize = channel.stream_stream(
        '/google.cloud.speech.v1.Speech/StreamingRecognize',
        request_serializer=dictation__asr__pb2.StreamingRecognizeRequest.SerializeToString,
        response_deserializer=dictation__asr__pb2.StreamingRecognizeResponse.FromString,
        )


class SpeechServicer(object):
  """Service that implements Google Cloud Speech API extended by Techmo.
  """

  def Recognize(self, request, context):
    """Performs synchronous speech recognition: receive results after all audio
    has been sent and processed.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StreamingRecognize(self, request_iterator, context):
    """Performs asynchronous speech recognition: receive results via the
    google.longrunning.Operations interface. Returns either an
    `Operation.error` or an `Operation.response` which contains
    a `LongRunningRecognizeResponse` message.
    rpc LongRunningRecognize(LongRunningRecognizeRequest) returns (google.longrunning.Operation) {
    option (google.api.http) = {
    post: "/v1/speech:longrunningrecognize"
    body: "*"
    };
    }

    Performs bidirectional streaming speech recognition: receive results while
    sending audio. This method is only available via the gRPC API (not REST).
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_SpeechServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Recognize': grpc.unary_unary_rpc_method_handler(
          servicer.Recognize,
          request_deserializer=dictation__asr__pb2.RecognizeRequest.FromString,
          response_serializer=dictation__asr__pb2.RecognizeResponse.SerializeToString,
      ),
      'StreamingRecognize': grpc.stream_stream_rpc_method_handler(
          servicer.StreamingRecognize,
          request_deserializer=dictation__asr__pb2.StreamingRecognizeRequest.FromString,
          response_serializer=dictation__asr__pb2.StreamingRecognizeResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'google.cloud.speech.v1.Speech', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
