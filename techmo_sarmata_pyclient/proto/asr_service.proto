//some code and comment are copied form:
//https://github.com/GoogleCloudPlatform/java-docs-samples/blob/master/speech/grpc/src/main/java/third_party/google/speech/v1/cloud-speech.proto

//grammar persistence options
// - per alive connection: user opens special channel to service to define grammars, grammars are kept as long as connection is alive
// - predefined per user on disk: service keep predefined grammar as files on disk, loads it at startup
// - auto-cache: all grammars are cached automatically using its hash as ID, max number of cached grammars and prune policy must be defined

// users account manipulation will be provided by different service

syntax = "proto3";

package sarmata;

service ASR
{
  // recognizes speech in stream using given grammar
  rpc Recognize(stream RecognizeRequest) returns (stream RecognizeResponse);
  
  // defines user-persistent grammar 
  rpc DefineGrammar(DefineGrammarRequest) returns (DefineGrammarRespone);
}

message RecognizeRequest {
  // The `initial_request` message provides information to the recognizer
  // that specifies how to process the request.
  //
  // The first `RecognizeRequest` message must contain an `initial_request`.
  // Any subsequent `RecognizeRequest` messages must not contain an
  // `initial_request`.
  InitialRecognizeRequest initial_request = 1;

  // The audio data to be recognized. Sequential chunks of audio data may be 
  // sent in sequential `RecognizeRequest` messages or whole data may be send in one message.
  AudioRequest audio_request = 2;
}

// single configuration option
message ConfigField
{
  string key = 1;
  string value = 2;
}

message InitialRecognizeRequest {
  // configuration
  repeated ConfigField config = 1;
  
  // authorization token
  string token        = 2;
}

message AudioRequest {
  // The audio data bytes encoded by default as 16bit 16kHz PCM
  bytes content = 1;

  // last message flag
  bool end_of_stream = 2;
}

/////////////

message DefineGrammarRequest
{
  // authorization token
  string token   = 1;
  
  // grammar id
  string name    = 2;
  
  // grammar data
  string grammar = 3;
}

message DefineGrammarRespone
{
  // error description
  string error = 1;
  
  // true if grammar is was created
  bool ok      = 2;
}

//////////////

enum ResponseStatus
{
  EMPTY = 0;                       // Should not be set
  SUCCESS = 1;                     // Phrase recognized
  PARTIAL_MATCH = 2;               // only beginning of utterence recognized
  NO_MATCH = 3;                    // no phrse recognized
  NO_INPUT_TIMEOUT = 4;            // no spech or no match in expected time
  GRAMMAR_LOAD_FAILURE = 5;        // grammar connot be loaded, more details in `error` filed
  GRAMMAR_COMPILATION_FAILURE = 6; // grammar compilation error, more details in `error` filed
  RECOGNIZER_ERROR = 7;            // iternal error
  TOO_MUCH_SPEECH_TIMEOUT = 8;     // speech to long
  CANCELLED = 9;                   // recognition cancelled
  START_OF_INPUT = 10;             // start of speech detected
  END_OF_AUDIO = 11;               // finished processing
  SEMANTICS_FAILURE = 12;          // error in SI processing
}

message RecognizeResponse {
  // status and type of message
  ResponseStatus status = 1;

  // critical error
  string error = 2;
  
  // minor error, ex: error in transcription
  string warning = 3;

  // time of event if applicable
  int32 event_time = 4;
  
  // list of recognized phrases in probability order
  repeated Phrase results = 5;
}

// single phrase data
message Phrase {

  // single word data
  message Word {
    // recognized word
    string transcript = 1;
    
    // word confidence
    double confidence = 2;
    
    // beginning time
    int32 start = 3;
    
    // end time
    int32 end = 4;
    
    // logprob of word
    double logprob = 5;
  }
  
  // words in phrases
  repeated Word words = 1;
  
  //confidence of phrase
  double confidence = 2;
  
  // is correct (confidence above thresshold)
  bool correct = 3;
  
  // Semantic Interpretation in JSON
  string semantic_interpretation = 4;
}

///// 

