# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: TTS.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='TTS.proto',
  package='herold',
  syntax='proto3',
  serialized_pb=_b('\n\tTTS.proto\x12\x06herold\"K\n\x11SynthesizeRequest\x12\x0c\n\x04text\x18\x01 \x01(\t\x12(\n\x06\x63onfig\x18\x02 \x01(\x0b\x32\x18.herold.SynthesizeConfig\"-\n\x10SynthesizeConfig\x12\x19\n\x11sample_rate_hertz\x18\x01 \x01(\x05\"T\n\x12SynthesizeResponse\x12 \n\x05\x61udio\x18\x01 \x01(\x0b\x32\x11.herold.AudioData\x12\x1c\n\x05\x65rror\x18\x02 \x01(\x0b\x32\r.herold.Error\"N\n\tAudioData\x12\x19\n\x11sample_rate_hertz\x18\x01 \x01(\x05\x12\x0f\n\x07\x63ontent\x18\x02 \x01(\x0c\x12\x15\n\rend_of_stream\x18\x03 \x01(\x08\"=\n\x05\x45rror\x12\x1f\n\x04\x63ode\x18\x01 \x01(\x0e\x32\x11.herold.ErrorCode\x12\x13\n\x0b\x64\x65scription\x18\x02 \x01(\t*_\n\tErrorCode\x12\x0b\n\x07UNKNOWN\x10\x00\x12\x0b\n\x07LICENCE\x10\x01\x12\x16\n\x12TEXT_NORMALIZATION\x10\x02\x12\x11\n\rTRANSCRIPTION\x10\x03\x12\r\n\tSYNTHESIS\x10\x04\x32L\n\x03TTS\x12\x45\n\nSynthesize\x12\x19.herold.SynthesizeRequest\x1a\x1a.herold.SynthesizeResponse0\x01\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

_ERRORCODE = _descriptor.EnumDescriptor(
  name='ErrorCode',
  full_name='herold.ErrorCode',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='UNKNOWN', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='LICENCE', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='TEXT_NORMALIZATION', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='TRANSCRIPTION', index=3, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SYNTHESIS', index=4, number=4,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=374,
  serialized_end=469,
)
_sym_db.RegisterEnumDescriptor(_ERRORCODE)

ErrorCode = enum_type_wrapper.EnumTypeWrapper(_ERRORCODE)
UNKNOWN = 0
LICENCE = 1
TEXT_NORMALIZATION = 2
TRANSCRIPTION = 3
SYNTHESIS = 4



_SYNTHESIZEREQUEST = _descriptor.Descriptor(
  name='SynthesizeRequest',
  full_name='herold.SynthesizeRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='text', full_name='herold.SynthesizeRequest.text', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='config', full_name='herold.SynthesizeRequest.config', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=21,
  serialized_end=96,
)


_SYNTHESIZECONFIG = _descriptor.Descriptor(
  name='SynthesizeConfig',
  full_name='herold.SynthesizeConfig',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='sample_rate_hertz', full_name='herold.SynthesizeConfig.sample_rate_hertz', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=98,
  serialized_end=143,
)


_SYNTHESIZERESPONSE = _descriptor.Descriptor(
  name='SynthesizeResponse',
  full_name='herold.SynthesizeResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='audio', full_name='herold.SynthesizeResponse.audio', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='error', full_name='herold.SynthesizeResponse.error', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=145,
  serialized_end=229,
)


_AUDIODATA = _descriptor.Descriptor(
  name='AudioData',
  full_name='herold.AudioData',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='sample_rate_hertz', full_name='herold.AudioData.sample_rate_hertz', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='content', full_name='herold.AudioData.content', index=1,
      number=2, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='end_of_stream', full_name='herold.AudioData.end_of_stream', index=2,
      number=3, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=231,
  serialized_end=309,
)


_ERROR = _descriptor.Descriptor(
  name='Error',
  full_name='herold.Error',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='code', full_name='herold.Error.code', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='description', full_name='herold.Error.description', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=311,
  serialized_end=372,
)

_SYNTHESIZEREQUEST.fields_by_name['config'].message_type = _SYNTHESIZECONFIG
_SYNTHESIZERESPONSE.fields_by_name['audio'].message_type = _AUDIODATA
_SYNTHESIZERESPONSE.fields_by_name['error'].message_type = _ERROR
_ERROR.fields_by_name['code'].enum_type = _ERRORCODE
DESCRIPTOR.message_types_by_name['SynthesizeRequest'] = _SYNTHESIZEREQUEST
DESCRIPTOR.message_types_by_name['SynthesizeConfig'] = _SYNTHESIZECONFIG
DESCRIPTOR.message_types_by_name['SynthesizeResponse'] = _SYNTHESIZERESPONSE
DESCRIPTOR.message_types_by_name['AudioData'] = _AUDIODATA
DESCRIPTOR.message_types_by_name['Error'] = _ERROR
DESCRIPTOR.enum_types_by_name['ErrorCode'] = _ERRORCODE

SynthesizeRequest = _reflection.GeneratedProtocolMessageType('SynthesizeRequest', (_message.Message,), dict(
  DESCRIPTOR = _SYNTHESIZEREQUEST,
  __module__ = 'TTS_pb2'
  # @@protoc_insertion_point(class_scope:herold.SynthesizeRequest)
  ))
_sym_db.RegisterMessage(SynthesizeRequest)

SynthesizeConfig = _reflection.GeneratedProtocolMessageType('SynthesizeConfig', (_message.Message,), dict(
  DESCRIPTOR = _SYNTHESIZECONFIG,
  __module__ = 'TTS_pb2'
  # @@protoc_insertion_point(class_scope:herold.SynthesizeConfig)
  ))
_sym_db.RegisterMessage(SynthesizeConfig)

SynthesizeResponse = _reflection.GeneratedProtocolMessageType('SynthesizeResponse', (_message.Message,), dict(
  DESCRIPTOR = _SYNTHESIZERESPONSE,
  __module__ = 'TTS_pb2'
  # @@protoc_insertion_point(class_scope:herold.SynthesizeResponse)
  ))
_sym_db.RegisterMessage(SynthesizeResponse)

AudioData = _reflection.GeneratedProtocolMessageType('AudioData', (_message.Message,), dict(
  DESCRIPTOR = _AUDIODATA,
  __module__ = 'TTS_pb2'
  # @@protoc_insertion_point(class_scope:herold.AudioData)
  ))
_sym_db.RegisterMessage(AudioData)

Error = _reflection.GeneratedProtocolMessageType('Error', (_message.Message,), dict(
  DESCRIPTOR = _ERROR,
  __module__ = 'TTS_pb2'
  # @@protoc_insertion_point(class_scope:herold.Error)
  ))
_sym_db.RegisterMessage(Error)


try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class TTSStub(object):
    """Techmo TTS Service API
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.Synthesize = channel.unary_stream(
          '/herold.TTS/Synthesize',
          request_serializer=SynthesizeRequest.SerializeToString,
          response_deserializer=SynthesizeResponse.FromString,
          )


  class TTSServicer(object):
    """Techmo TTS Service API
    """

    def Synthesize(self, request, context):
      """Return speech using given text and optional configuration
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_TTSServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'Synthesize': grpc.unary_stream_rpc_method_handler(
            servicer.Synthesize,
            request_deserializer=SynthesizeRequest.FromString,
            response_serializer=SynthesizeResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'herold.TTS', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaTTSServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """Techmo TTS Service API
    """
    def Synthesize(self, request, context):
      """Return speech using given text and optional configuration
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaTTSStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """Techmo TTS Service API
    """
    def Synthesize(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Return speech using given text and optional configuration
      """
      raise NotImplementedError()


  def beta_create_TTS_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('herold.TTS', 'Synthesize'): SynthesizeRequest.FromString,
    }
    response_serializers = {
      ('herold.TTS', 'Synthesize'): SynthesizeResponse.SerializeToString,
    }
    method_implementations = {
      ('herold.TTS', 'Synthesize'): face_utilities.unary_stream_inline(servicer.Synthesize),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_TTS_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('herold.TTS', 'Synthesize'): SynthesizeRequest.SerializeToString,
    }
    response_deserializers = {
      ('herold.TTS', 'Synthesize'): SynthesizeResponse.FromString,
    }
    cardinalities = {
      'Synthesize': cardinality.Cardinality.UNARY_STREAM,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'herold.TTS', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
